//Approach-1[Brute Force]
public static boolean isPowerofTwo(long n){
        
        // Your code here 
        if(n==0)
            return false;
        int count=0;
        while(n>0)
        {
            if(n%2==1)
               count++;
            n=n/2;
        }
        if(count>1)
                return false;
        else
            return true;
    }
    //Time Complexity : O(log(n))
//Space Complexity : O(1)

//Approach-2[Brute Force] (More efficient from earlier)
public static boolean isPowerofTwo(long n){
        
        // Your code here 
        if(n==0)
            return false;
        while(n>1)
        {
            if(n%2==1)
                return false;
            n=n/2;
        }
        return true;
    }
    //Time Complexity : O(log(n))
//Space Complexity : O(1)


//Approach-3[Efficient]
public static boolean isPowerofTwo(long n){
        
        // Your code here 
        if(n==0)
            return false;
        return (n&(n-1))==0?true:false;
    }
    //Time Complexity : O(1)
//Space Complexity : O(1)
