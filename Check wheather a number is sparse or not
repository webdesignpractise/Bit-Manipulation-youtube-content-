Approach-1 (Brute Force)
------------------------
public static boolean isSparse(int n)
{
        // Your code here
        int count=0;
        int res=0;
        while(N>0)
        {
            if(N%2==1)
            {
                count++;
            }
            else
            {
                res=Math.max(res,count);
                count=0;
            }
            N/=2;
        }
        res=Math.max(res,count);
        if(res>=2)
                return false;
        return true;
    }
}
Time Complexity : Theta(log(n))
Space Complexity : O(1)

Approach-2(Brute Force Optimized)
----------------------------------
public static boolean isSparse(int n)
{
        // Your code here
        int count=0;
        int res=0;
        while(N>0)
        {
            if(N%2==1)
            {
                count++;
                if(count==2)
                        return false;
            }
            else
            {
                count=0;
            }
            N/=2;
        }
        return true;
    }
}
Time Complexity : O(log(n))
Space Complexity : O(1)

Approach-2(Efficient)
------------------------
public static boolean isSparse(int n)
{
        // Your code here
        return (n&(n>>1))==0;
}

Time Complexity : O(1)
Space Complexity : O(1)
